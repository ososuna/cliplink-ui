import{H as i,C as c}from"./use-service.OG-UkMvg.js";import{s as m}from"./ui.store.V0UIaDrX.js";class d{static get email(){return/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/}}class u{constructor(e,t,r,s){this.name=e,this.lastName=t,this.email=r,this.password=s}static create(e){const{name:t,lastName:r,email:s,password:o}=e;return t?r?s?d.email.test(s)?o?o.length<6?["password too short",void 0]:[void 0,new u(t,r,s,o)]:["missing password",void 0]:["email is not valid"]:["missing email",void 0]:["missing last name",void 0]:["missing name",void 0]}}class h{constructor(e,t){this.email=e,this.password=t}static create(e){const{email:t,password:r}=e;return t?d.email.test(t)?r?r.length<6?["password too short",void 0]:[void 0,new h(t,r)]:["missing password",void 0]:["email is not valid"]:["missing email",void 0]}}class l{constructor(e,t,r){this.name=e,this.lastName=t,this.email=r}static create(e){const{name:t,lastName:r,email:s}=e;return[void 0,new l(t,r,s)]}}class g{constructor(e){this.authService=e}async execute(e){return await this.authService.login(e)}}class p{constructor(e){this.authService=e}async execute(e){return await this.authService.register(e)}}class f{constructor(e){this.authService=e}async execute(e){return await this.authService.checkToken(e)}}class v{constructor(e){this.authService=e}async execute(){await this.authService.logout()}}class y{constructor(e){this.authService=e}async execute(e){return await this.authService.update(e)}}class S{constructor(e){this.authService=e}async execute(){await this.authService.authGithub()}}class k{constructor(e){this.authService=e}async execute(){await this.authService.deleteAccount()}}class x{constructor(e){this.authService=e}async execute(e){await this.authService.forgotPassword(e)}}class E{constructor(e){this.authService=e}async execute(e){return await this.authService.checkPasswordToken(e)}}class U{constructor(e){this.authService=e}async execute(e,t){return await this.authService.updatePassword(e,t)}}class C{login(e){return i.post("/auth/login",e)}register(e){return i.post("/auth/register",e)}checkToken(e){return e?i.get("/auth/token",{headers:{Cookie:`access_token=${e}`}}):i.get("/auth/token")}logout(){return i.accessToken="",i.get("/auth/logout")}update(e){return i.put("/auth",e)}authGithub(){return i.get("/auth/github")}deleteAccount(){return i.delete("/auth")}forgotPassword(e){return i.post("/auth/forgot-password",{email:e})}checkPasswordToken(e){return i.get(`/auth/password-token/${e}`)}updatePassword(e,t){return i.put("/auth/update-password",{token:e,password:t})}}class T{constructor(e,t=m){this.authService=e,this.notifyUiError=t}handleError=e=>{if(e instanceof c){this.notifyUiError({type:"error",message:e.message});return}this.notifyUiError({type:"error",message:"Please try again later. If the issue persists talk to the admin."})};async loginByEmail(e,t){const[r,s]=h.create({email:e,password:t});if(!r)return new g(this.authService).execute(s).then(()=>{window.location.href="/dashboard"}).catch(o=>this.handleError(o))}async registerByEmail(e,t,r,s){const[o,n]=u.create({name:t,lastName:r,email:e,password:s});o||new p(this.authService).execute(n).then(()=>{window.location.href="/dashboard"}).catch(w=>this.handleError(w))}async checkToken(e){return new f(this.authService).execute(e).then(t=>t).catch(t=>{t instanceof c||this.notifyUiError({type:"error",message:"An unexpected error has happened. If the issue persists please talk to the admin."})})}async logout(){return new v(this.authService).execute().then(()=>{window.location.href="/"}).catch(this.handleError)}async update(e,t,r){const[s,o]=l.create({name:e,lastName:t,email:r});if(s){this.notifyUiError({type:"error",message:s});return}return new y(this.authService).execute(o).then(n=>n).catch(this.handleError)}async authGithub(){new S(this.authService).execute()}async deleteAccount(){new k(this.authService).execute().then(()=>{window.location.href="/"}).catch(this.handleError)}async forgotPassword(e){new x(this.authService).execute(e).then(()=>{window.location.href=`/auth/forgot-password/confirm?email=${encodeURIComponent(e)}`}).catch(t=>{if(t.statusCode!==500){window.location.href=`/auth/forgot-password/confirm?email=${encodeURIComponent(e)}`;return}if(t instanceof c){this.notifyUiError({type:"error",message:t.message});return}this.notifyUiError({type:"error",message:"Please try again later. If the issue persists talk to the admin."})})}async checkPasswordToken(e){return new E(this.authService).execute(e).then(t=>t).catch(this.handleError)}async updatePassword(e,t){return new U(this.authService).execute(e,t).then(r=>r).catch(this.handleError)}}export{T as A,C as a};
